{"version":3,"sources":["components/Tree.js","components/Sidebar.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["Tree","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","expanded","setState","subtree","_this2","treeData","treeDepth","divstyle","marginLeft","arrowStyle","cursor","children","react_default","a","createElement","key","id","parentExpanded","length","map","child","style","onClick","bind","name","Component","connect","Sidebar","className","components_Tree","App","components_Sidebar","Boolean","window","location","hostname","match","initState","rootReducer","arguments","undefined","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAGMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAU,GAHKR,yEAOjBG,KAAKM,SAAS,CACZD,UAAWL,KAAKI,MAAMC,4CAGjB,IAGHE,EAHGC,EAAAR,KACHS,EAAWT,KAAKJ,MAAMa,SACtBC,EAAYV,KAAKJ,MAAMc,UAEvBC,EAAW,CACbC,WAAyB,EAAZF,EAAgB,MAE3BG,EAAY,CACdC,OAAQ,WAuCV,MA1BoC,qBAAvBL,EAASM,SACXC,EAAAC,EAAAC,cAACvB,EAAD,CAAMc,SAAUA,EAAS,GAAIU,IAAOV,EAAS,GAAGW,GAAIV,UAAYA,EAAY,EAAGW,eAAkBb,EAAKJ,MAAMC,WAG5GI,EAASM,SAASO,OAAS,GAAKd,EAAKZ,MAAMyB,gBAClDd,EAAUE,EAASM,SAASQ,IAAI,SAAAC,GAC9B,OAAOR,EAAAC,EAAAC,cAACvB,EAAD,CAAMc,SAAUe,EAAOL,IAAMK,EAAMJ,GAAIV,UAAYA,EAAY,EAAGW,eAAkBb,EAAKJ,MAAMC,aAGtGW,EAAAC,EAAAC,cAAA,OAAKO,MAAQd,GAnBdH,EAAKJ,MAAMC,SACLW,EAAAC,EAAAC,cAAA,KAAGO,MAASZ,EAAYa,QAAUlB,EAAKkB,QAAQC,KAAKnB,IAApD,UAGAQ,EAAAC,EAAAC,cAAA,KAAGO,MAASZ,EAAYa,QAAUlB,EAAKkB,QAAQC,KAAKnB,IAApD,UAiBFC,EAASmB,KACTrB,IAK8B,IAA7BE,EAASM,SAASO,QAAiBd,EAAKZ,MAAMyB,eAC7CL,EAAAC,EAAAC,cAAA,OAAKO,MAAQd,EAAUe,QAAUlB,EAAKkB,QAAQC,KAAKnB,IAAQC,EAASmB,MAIpE,YAvDIC,aAqEJC,cAPK,SAAA1B,GAClB,MAAO,CACLK,SAAUL,EAAMK,SAChBC,UAAWN,EAAMM,YAINoB,CAAqBnC,GCzDrBoC,0LARV,OACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAY,WACfhB,EAAAC,EAAAC,cAACe,EAAD,cALaJ,cCUPK,0LARX,OACElB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAACiB,EAAD,cAJUN,cCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sEClBAC,EAAY,CAChBhC,SAAU,CAAC,CACTW,GAAI,EACJQ,KAAM,OACNb,SAAU,CACR,CACEK,GAAI,EACJQ,KAAM,UACNb,SAAU,CACR,CACEK,GAAI,EACJQ,KAAM,QACNb,SAAU,IAEZ,CACEK,GAAI,EACJQ,KAAM,QACNb,SAAU,CAAC,CACTK,GAAI,GACJQ,KAAM,QACNb,SAAU,IAEZ,CACEK,GAAI,GACJQ,KAAM,QACNb,SAAU,QAKlB,CACEK,GAAI,EACJQ,KAAM,WACNb,SAAU,CACR,CACEK,GAAI,EACJQ,KAAM,QACNb,SAAU,IAEZ,CACEK,GAAI,EACJQ,KAAM,QACNb,SAAU,MAIhB,CACEK,GAAI,EACJQ,KAAM,WACNb,SAAU,CACR,CACEK,GAAI,EACJQ,KAAM,QACNb,SAAU,IAEZ,CACEK,GAAI,GACJQ,KAAM,QACNb,SAAU,SAOpBL,UAAW,GAMEgC,EAJK,WAA+B,IAA9BtC,EAA8BuC,UAAArB,OAAA,QAAAsB,IAAAD,UAAA,GAAAA,UAAA,GAAtBF,EAAsBE,UAAArB,OAAA,GAAAqB,UAAA,GACjD,OAAOvC,GC3DHyC,EAAQC,YAAYJ,GAE1BK,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAUJ,MAAOA,GAAO7B,EAAAC,EAAAC,cAACgC,EAAD,OAAoBC,SAASC,eAAe,SFsH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b29a0b42.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Tree extends Component {\r\n  constructor(props) {\r\n    super(props); //not sure what this line does\r\n    this.state = {\r\n      expanded: true\r\n    };\r\n  }\r\n  onClick(){\r\n    this.setState({\r\n      expanded: !this.state.expanded\r\n    })\r\n  }\r\n  render() {\r\n    let treeData = this.props.treeData;\r\n    let treeDepth = this.props.treeDepth;\r\n    let subtree;\r\n    let divstyle = {\r\n      marginLeft: (treeDepth * 5) +'px'\r\n    }\r\n    let arrowStyle= {\r\n      cursor: 'pointer'\r\n    }\r\n    let arrow = () =>{\r\n      if(this.state.expanded){\r\n        return(<b style = {arrowStyle} onClick ={this.onClick.bind(this)}>&#9662;</b>)        \r\n      }\r\n      else{\r\n        return(<b style = {arrowStyle} onClick ={this.onClick.bind(this)}>&#9656;</b>)   \r\n      }  \r\n    }\r\n\r\n    let recursiveMenuLogic = () =>{\r\n\r\n      if (typeof(treeData.children) === \"undefined\") {\r\n        return <Tree treeData={treeData[0]} key = {treeData[0].id} treeDepth ={treeDepth + 1} parentExpanded = {this.state.expanded} />;\r\n      }\r\n      \r\n      else if (treeData.children.length > 0 && this.props.parentExpanded) {\r\n        subtree = treeData.children.map(child => {\r\n          return <Tree treeData={child} key ={child.id} treeDepth ={treeDepth + 1} parentExpanded = {this.state.expanded}/>;       \r\n        });  \r\n        return(\r\n          <div style ={divstyle}>\r\n            {arrow()}            \r\n            {treeData.name}          \r\n            {subtree}\r\n          </div>\r\n        )\r\n      }    \r\n\r\n      else if(treeData.children.length === 0  && this.props.parentExpanded) {\r\n        return <div style ={divstyle} onClick ={this.onClick.bind(this)}>{treeData.name}</div>;\r\n      }\r\n\r\n      else{\r\n        return null\r\n      }\r\n    }\r\n\r\n    return (recursiveMenuLogic())    \r\n  }\r\n}\r\nconst getTreeData = state => {\r\n  return {\r\n    treeData: state.treeData,\r\n    treeDepth: state.treeDepth\r\n  };\r\n};\r\n\r\nexport default connect(getTreeData)(Tree);\r\n","import React, {Component} from 'react'\r\nimport Tree from './Tree'\r\nimport '../styles/Sidebar.css'\r\n\r\nclass Sidebar extends Component{\r\n\r\n  render(){\r\n     return(\r\n       <div className = 'sidebar'>\r\n         <Tree />\r\n       </div>      \r\n    )\r\n  }\r\n}\r\n\r\nexport default Sidebar","import React, { Component } from 'react';\nimport Sidebar from './components/Sidebar'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Sidebar/>  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n  treeData: [{\r\n    id: 1,\r\n    name: \"Info\",\r\n    children: [\r\n      {\r\n        id: 2,\r\n        name: \"Company\",\r\n        children: [ \r\n          {\r\n            id: 3,\r\n            name: \"Test1\",\r\n            children: []\r\n          },\r\n          {\r\n            id: 4,\r\n            name: \"Test2\",\r\n            children: [{\r\n              id: 21,\r\n              name: \"Test1\",\r\n              children: []\r\n            },\r\n            {\r\n              id: 22,\r\n              name: \"Test2\",\r\n              children: []\r\n            }]\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 5,\r\n        name: \"Services\",\r\n        children: [\r\n          {\r\n            id: 6,\r\n            name: \"Test3\",\r\n            children: []\r\n          },\r\n          {\r\n            id: 7,\r\n            name: \"Test4\",\r\n            children: []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: 8,\r\n        name: \"Contacts\",\r\n        children: [\r\n          {\r\n            id: 9,\r\n            name: \"Test5\",\r\n            children: []\r\n          },\r\n          {\r\n            id: 10,\r\n            name: \"Test6\",\r\n            children: []\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }],\r\n\r\n  treeDepth: 0,\r\n};\r\nconst rootReducer = (state = initState, action) => {\r\n  return state;\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}